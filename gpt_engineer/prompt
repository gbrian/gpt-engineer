Create a summary from all files with the name of the file and a summary of the file contents
Summarized as much as possible to save space keeo only what can be relevant when deciding
which files can be affected by a future task like: "Create a new functionality about X or Y" or "Change the implementation of X by adding Y".

[[PROMPT]]
Add prompt parameter of type string to gtp_engineer and fix api and cli accordingly

[[PROMPT]]
If prompt parameter is set save it in a file named prompt at workspace_path

[[PROMPT]]
Create new function at core/__init__.py index_content it will receive a path and extensions parameters and will traverse all file
and for each file with a valid extension will call to new class Summary summary_file method.

Create Summary class at core/summary.py and add methods:
- summary_file: Will receive a file_name and data byte[] and will send to the AI to be summarized using SUMMARY_PROMPT prompt below.
                Results will be added to the main summary.txt file replacing current text defined by ## FILE: file_name and < FILE: file_name
                Create the prompt replacing the [[XXX]] values

SUMMARY_PROMPT
Summarize this file of type [[EXTENSION]]
Keep all sensitive information extrict like class names, function names and other relevan information.
Reduce to the maximum.
File content:
[[FILE_CONTENT]]

[[AI]]
PLANNING:
1. In the `core/__init__.py` file, we need to create a new function `index_content`. This function will take two parameters: `path` and `extensions`. It will traverse all files in the given path and for each file with a valid extension, it will call the `summary_file` method of the `Summary` class.

2. We need to create a new file `core/summary.py` and add a new class `Summary` in it. This class will have a method `summary_file` which will take two parameters: `file_name` and `data`. This method will send the data to the AI to be summarized using the `SUMMARY_PROMPT` prompt. The results will be added to the main `summary.txt` file replacing the current text defined by `## FILE: file_name` and `< FILE: file_name`. The prompt will be created by replacing the `[[XXX]]` values in the `SUMMARY_PROMPT`.

OUTPUT:
```python
core/__init__.py
<<<<<<< HEAD
    from gpt_engineer.core.db import DB, DBs, DBPrompt, archive
    from gpt_engineer.core.steps import STEPS, Config as StepsConfig
    from gpt_engineer.cli.collect import collect_learnings
    from gpt_engineer.cli.learning import check_collection_consent
=======
    from gpt_engineer.core.db import DB, DBs, DBPrompt, archive
    from gpt_engineer.core.steps import STEPS, Config as StepsConfig
    from gpt_engineer.core.summary import Summary
    from gpt_engineer.cli.collect import collect_learnings
    from gpt_engineer.cli.learning import check_collection_consent

    # Add new function index_content
    def index_content(path: str, extensions: list):
        summary = Summary()
        for root, dirs, files in os.walk(path):
            for file in files:
                if file.endswith(tuple(extensions)):
                    with open(os.path.join(root, file), 'rb') as f:
                        data = f.read()
                    summary.summary_file(file, data)
>>>>>>> updated
```

```python
core/summary.py
<<<<<<< HEAD
=======
class Summary:
    def summary_file(self, file_name: str, data: bytes):
        SUMMARY_PROMPT = "Summarize this file of type [[EXTENSION]]\nKeep all sensitive information extrict like class names, function names and other relevan information.\nReduce to the maximum.\nFile content:\n[[FILE_CONTENT]]"
        extension = os.path.splitext(file_name)[1]
        file_content = data.decode('utf-8')
        prompt = SUMMARY_PROMPT.replace('[[EXTENSION]]', extension).replace('[[FILE_CONTENT]]', file_content)
        # Send the prompt to the AI and get the summarized content
        summarized_content = AI.summarize(prompt)
        # Add the summarized content to the main summary.txt file
        with open('summary.txt', 'r+') as f:
            content = f.read()
            start_index = content.find(f'## FILE: {file_name}')
            end_index = content.find(f'< FILE: {file_name}')
            if start_index != -1 and end_index != -1:
                f.seek(start_index)
                f.write(f'## FILE: {file_name}\n{summarized_content}\n< FILE: {file_name}')
            else:
                f.write(f'\n## FILE: {file_name}\n{summarized_content}\n< FILE: {file_name}')
>>>>>>> updated
```
Note: The `AI.summarize(prompt)` method is a placeholder and needs to be replaced with the actual method that sends the prompt to the AI and gets the summarized content.

[[PROMPT]]
index_content must pass ai parameter to summary_file.
summary_file will call ai.next with the generated prompt.
Fix functions with missing parameters.
Documen classes

[[AI]]
PLANNING:
We need to change the `index_content` function to pass the `ai` parameter to the `summary_file` function. This is because `summary_file` will call `ai.next` with the generated prompt. Also, we need to fix the `index_content` function to include the missing parameters `model`, `temperature`, `azure_endpoint`, and `ai_cache`. Finally, we need to add documentation for the `index_content` function.

OUTPUT:
```python
core/__init__.py
<<<<<<< HEAD
# Add new function index_content
def index_content(path: str, extensions: list):
    ai = AI(
        model_name=model,
        temperature=temperature,
        azure_endpoint=azure_endpoint,
        cache=DB(memory_path / "cache") if ai_cache else None,
    )
    summary = Summary()
    for root, dirs, files in os.walk(path):
        for file in files:
            if file.endswith(tuple(extensions)):
                with open(os.path.join(root, file), "rb") as f:
                    data = f.read()
                summary.summary_file(file, data)
=======
# Add new function index_content
def index_content(path: str, extensions: list, model: str, temperature: float, azure_endpoint: str, ai_cache: bool):
    """
    Index the content of files in a given path and generate a summary.

    This function walks through the directory specified by the path, and for each file
    with an extension included in the extensions list, it reads the file and generates
    a summary using the AI model.

    Parameters
    ----------
    path : str
        The path of the directory to index.
    extensions : list
        The list of file extensions to include in the indexing.
    model : str
        The name of the AI model to use.
    temperature : float
        The temperature setting for the AI model.
    azure_endpoint : str
        The Azure endpoint URL, if applicable.
    ai_cache : bool
        Whether to use AI cache.

    """
    ai = AI(
        model_name=model,
        temperature=temperature,
        azure_endpoint=azure_endpoint,
        cache=DB(memory_path / "cache") if ai_cache else None,
    )
    summary = Summary()
    for root, dirs, files in os.walk(path):
        for file in files:
            if file.endswith(tuple(extensions)):
                with open(os.path.join(root, file), "rb") as f:
                    data = f.read()
                summary.summary_file(file, data, ai)
>>>>>>> updated
```

[[PROMPT]]
Documment class Summary and add ai:AI parameter to the constructor.
Fix code using Summary.

[[AI]]
PLANNING:
We need to add a constructor to the Summary class that accepts an AI instance as a parameter. This is because the Summary class needs to use the AI instance to generate summaries. We also need to document the Summary class to explain its purpose and usage.

In the `index_content` function, we need to pass the `ai` instance when creating a new `Summary` instance.

OUTPUT:
```python
core/__init__.py
<<<<<<< HEAD
class Summary:
=======
class Summary:
    """
    A class to generate summaries of file contents using an AI model.

    This class provides methods to read the contents of a file and generate a summary
    using a specified AI model. It is designed to work with text files.

    Attributes
    ----------
    ai : AI
        The AI instance used to generate summaries.

    Methods
    -------
    summary_file(file_name, data) -> str:
        Generate a summary of the contents of a file.
    """
    def __init__(self, ai: AI):
        """
        Initialize the Summary class.

        Parameters
        ----------
        ai : AI
            The AI instance to use for generating summaries.
        """
        self.ai = ai
>>>>>>> updated
```

```python
core/__init__.py
<<<<<<< HEAD
    summary = Summary()
=======
    summary = Summary(ai)
>>>>>>> updated
```
